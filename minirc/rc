#!/bin/bash

set -u
echo -e "minirc-ng @ 0.4"

declare -r _piddir="/tmp/minirc"
declare -r _config="/etc/minirc.json"
declare -a _daemons=()
declare -a _enabled=()

_load_array() {
    local -n _ref=${1}
    if [[ -n "${2}" ]]
    then
        # shellcheck disable=SC2034
        mapfile -t _ref <<< "${2}"
    fi
}

# load config
_load_array _daemons "$(jq -crM '.[] | .name' ${_config})"
_load_array _enabled "$(jq -crM '.[] | select(.enabled==true) | .name' ${_config})"

# ${1} -> service
# ${2} -> user
# ${3} -> command
# for logging use:
# |& logger --tag "${1}" &
_daemon_start() {
    local -a _params=()
    _load_array _params "$( jq -crM --arg name "${1}" '.[] | select(.name==$name) | .user, .command' ${_config} )"
    if (( ${#_params[@]} == 2 ))
    then
        local -r _pidfile="${_piddir}/${1}.pid"
        echo "Starting ${1}..."
        if _daemon_poll "${1}"
        then
            echo "Error: ${_pidfile} exists"
        else
            local -r _user="${_params[0]}"
            local -r _command="${_params[1]}"

            local -r _fifo="$(mktemp -u)"
            su - "${_user}" -c "mkfifo ${_fifo}"
            su - "${_user}" -c "( ${_command} & echo \$! > ${_fifo} )" &> /dev/null &

            local -r _pid="$(cat "${_fifo}")"
            echo "${_pid}" > "${_pidfile}"
            rm -f "${_fifo}"
            echo "User: ${_user}"
            echo "Exec: ${_command}"
            echo "PID: ${_pid}"
        fi
    else
        echo -e "Error: unknown service: ${1}"
    fi
}

_daemon_stop() {
    local -r _pidfile="${_piddir}/${1}.pid"
    echo "Stopping ${1}..."

    if _daemon_poll "${1}"
    then
        local -r _pid="$(cat "${_pidfile}")"
        /usr/bin/kill --verbose --signal TERM --timeout 10000 KILL "${_pid}"
        echo "Killed."
        rm -rf "${_pidfile}"
    else
        echo "Error: ${_pidfile} does not exist or service is not running"
    fi
}

_daemon_poll() {
    local -r _pidfile="${_piddir}/${1}.pid"
    # if pidfile exists and pid from pidfile is running
    [[ -f "${_pidfile}" ]] && ps -p "$(cat "${_pidfile}")" &> /dev/null
}

_on_boot() {

    echo "Creating PID dir..."
    rm -rf "${_piddir}"
    mkdir -p "${_piddir}"
    chmod 777 "${_piddir}"

    echo "Mounting API filesystem..."
    mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
    mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
    mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
    mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
    mkdir -p /dev/pts /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
    mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev

    echo "Setting up loopback device..."
    /usr/sbin/ip link set up dev lo

    echo "Initializing udev..."
    /usr/lib/systemd/systemd-udevd --daemon
    /usr/bin/udevadm trigger --action=add --type=subsystems
    /usr/bin/udevadm trigger --action=add --type=devices

    echo "Setting hostname..."
    cat /etc/hostname >| /proc/sys/kernel/hostname

    echo "Creating symlinks..."
    ln -s /proc/kcore /dev/core
    ln -s /proc/self/fd /dev/fd
    ln -s /proc/self/fd/0 /dev/stdin
    ln -s /proc/self/fd/1 /dev/stdout
    ln -s /proc/self/fd/2 /dev/stderr

    echo "Mounting fstab..."
    mount -a

    if [ -x /etc/minirc.local ]
    then
        echo "Loading /etc/minirc.local..."
        /etc/minirc.local
    fi

    echo "Starting daemons..."
    for dmn in "${_enabled[@]}"
    do
        _daemon_start "${dmn}"
    done
}

_on_shutdown() {
    echo "Stopping daemons..."
    for dmn in "${_daemons[@]}"
    do
        _daemon_poll "${dmn}" && _daemon_stop "${dmn}"
    done

    if [ -x /etc/minirc.local.shutdown ]
    then
        echo "Loading /etc/minirc.local.shutdown..."
        /etc/minirc.local.shutdown
    fi

    echo "Shutting down udev..."
    killall -q -w systemd-udevd

    echo "Clearing /tmp..."
    rm -rf /tmp/{*,.*} &> /dev/null

    echo "Unmounting API filesystem..."
    umount -r /run
}

_usage() {
    echo "Usage: rc [--help] <action> [daemon]"
    echo ""
    echo "Actions:"
    echo "   rc list              shows status of all daemons"
    echo "   rc start [daemon]    starts daemon"
    echo "   rc stop [daemon]     stops daemon"
    exit 2
}

_not_root() {
    echo "Root privileges are required to run this command"
    exit 1
}

(( ${#} == 0 )) && _usage

case "${1}" in
init|shutdown|list)
    (( ${#} != 1 )) && _usage
    ;;&
start|stop)
    (( ${#} != 2 )) && _usage
    ;;&
init|shutdown|start|stop)
    (( EUID != 0 )) && _not_root
    ;;&
init)
    _on_boot;;
shutdown)
    _on_shutdown;;
start|stop)
    _daemon_"${1}" "${2}";;
list)
    for dmn in "${_daemons[@]}"
    do
        if _daemon_poll "${dmn}"
        then
            echo -e "[\033[32mX\033[0m] ${dmn}"
        else
            echo -e "[ ] ${dmn}"
        fi
    done;;
*)
    _usage;;
esac
