#!/bin/bash
set -u

DAEMONS="svc1 svc2"
ENABLED="svc1"
PIDDIR="/tmp/minirc"

daemon_start() {
    case "${1}" in
    svc1)
        daemon_execute "${1}" "root" "sleep infinity";;
    svc2)
        daemon_execute "${1}" "root" "sleep infinity";;
    *)
        echo -e "Error: unknown service: ${1}";;
    esac
}

# load overriden settings
. /etc/minirc.conf

# ${1} -> service
# ${2} -> user
# ${3} -> command
daemon_execute() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    echo "Starting ${1}..."

    if daemon_poll "${1}"
    then
        echo "Error: ${pidfile} exists"
    else
        declare -r fifo="$(mktemp -u)"
        
        sudo -u "${2}" mkfifo "${fifo}"
        sudo -u "${2}" sh -c "echo \$\$ > ${fifo}; exec ${3}" &> /dev/null &

        declare -r pid="$(cat "${fifo}")"
        echo "${pid}" > "${pidfile}"
        rm -f "${fifo}"
        echo "User: ${2}"
        echo "Exec: ${3}"
        echo "PID: ${pid}"
    fi
}

daemon_stop() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    echo "Stopping ${1}..."

    if daemon_poll "${1}"
    then
        declare -r pid="$(cat ${pidfile})"
        echo -ne "Killing ${pid}... "

        kill -- -$(ps -o pgid= ${pid} | grep -o '[0-9]*')
        timeout 10 tail --pid="${pid}" -f /dev/null

        kill -9 -$(ps -o pgid= ${pid} | grep -o '[0-9]*') &> /dev/null
        timeout 10 tail --pid="${pid}" -f /dev/null

        echo "killed."
        rm -rf "${pidfile}"
    else
        echo "Error: ${pidfile} does not exist or service is not running"
    fi
}

daemon_poll() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    test -f "${pidfile}" && ps -p "$(cat "${pidfile}")" &> /dev/null
}

on_boot() {
    echo "Creating PID dir..."
    mkdir -p -m 777 "${PIDDIR}"

    echo "mounting API filesystem..."
    mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
    mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
    mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
    mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
    mkdir -p /dev/pts /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
    mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev

    echo "setting up loopback device..."
    /usr/sbin/ip link set up dev lo

    echo "initializing udev..."
    /usr/lib/systemd/systemd-udevd --daemon
    /usr/bin/udevadm trigger --action=add --type=subsystems
    /usr/bin/udevadm trigger --action=add --type=devices

    echo "setting hostname..."
    echo "$(cat /etc/hostname)" >| /proc/sys/kernel/hostname

    echo "creating symlinks..."
    ln -s /proc/kcore /dev/core
    ln -s /proc/self/fd /dev/fd
    ln -s /proc/self/fd/0 /dev/stdin
    ln -s /proc/self/fd/1 /dev/stdout
    ln -s /proc/self/fd/2 /dev/stderr

    echo "mounting fstab..."
    mount -a

    echo "starting daemons..."
    for dmn in ${ENABLED}
    do
        daemon_start "${dmn}"
    done
    
    if [ -x /etc/minirc.local ]
    then
        echo "loading /etc/minirc.local..."
        /etc/minirc.local
    fi
}

on_shutdown() {
    echo "stopping daemons..."
    for dmn in ${DAEMONS}
    do
        daemon_poll "${dmn}" && daemon_stop "${dmn}"
    done

    if [ -x /etc/minirc.local.shutdown ]
    then
        echo "loading /etc/minirc.local.shutdown..."
        /etc/minirc.local.shutdown
    fi

    echo "shutting down udev..."
    killall systemd-udevd

    echo "unmounting API filesystem..."
    umount -r /run
}

daemon_restart() {
    daemon_stop "${1}"
    sleep 1
    daemon_start "${1}"
}

usage() {
    echo "Usage: rc [--help] <action> [daemon]"
    echo
    echo "Actions:"
    echo "   rc list              shows status of all daemons"
    echo "   rc start [daemon]    starts daemon"
    echo "   rc stop [daemon]     stops daemon"
    echo "   rc restart [daemon]  restarts daemon"
    exit 2
}

not_root() {
    echo "Root privileges are required to run this command"
    exit 1
}

case "${1}" in
init)
    on_boot;;
shutdown)
    on_shutdown;;
start|stop|restart)
    [ $# -ne 2 ] && usage
    [ ${EUID} -ne 0 ] && not_root
    daemon_"${1}" "${2}";;
list)
    for dmn in ${DAEMONS}
    do
        if daemon_poll "${dmn}"
        then
            echo "[X] ${dmn}"
        else
            echo "[ ] ${dmn}"
        fi
    done;;
*)
    usage;;
esac
