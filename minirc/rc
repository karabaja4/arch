#!/bin/sh
set -u

_echo() {
    printf '%s\n' "${1}"
}

_echo "minirc-ng @ 0.5 (running in $(readlink /proc/$$/exe))"

_piddir="/tmp/minirc"
_config="/etc/minirc.json"

# load config
_daemons="$(jq -crM '.[] | .name' ${_config})"
_enabled="$(jq -crM '.[] | select(.enabled==true) | .name' ${_config})"

# ${1} -> service
# ${2} -> user
# ${3} -> command
# for logging use:
# |& logger --tag "${1}" &
_daemon_start() (

    _params="$(jq -crM --arg name "${1}" '.[] | select(.name==$name) | .user, .command' ${_config})"
    if [ "$(_echo "${_params}" | wc -l)" -ne 2 ]
    then
        _echo "Error: unknown service: ${1}"
        exit 1
    fi

    _pidfile="${_piddir}/${1}.pid"
    _echo "Starting ${1}..."
    
    if _daemon_poll "${1}"
    then
        _echo "Error: ${_pidfile} exists"
    else
        _user="$(_echo "${_params}" | head -n1)"
        _command="$(_echo "${_params}" | tail -n1)"

        _fifo="$(mktemp -u)"
        su - "${_user}" -c "mkfifo ${_fifo}"
        su - "${_user}" -c "( ${_command} & printf '%s' "\$!" > ${_fifo} )" > /dev/null 2>&1 &

        _pid="$(cat "${_fifo}")"
        _echo "${_pid}" > "${_pidfile}"
        rm -f "${_fifo}"
        _echo "User: ${_user}"
        _echo "Exec: ${_command}"
        _echo "PID: ${_pid}"
    fi
)

_daemon_stop() (

    _pidfile="${_piddir}/${1}.pid"
    _echo "Stopping ${1}..."

    if _daemon_poll "${1}"
    then
        _pid="$(cat "${_pidfile}")"
        /usr/bin/kill --verbose --signal TERM --timeout 10000 KILL "${_pid}"
        _echo "Killed ${_pid}."
        rm -rf "${_pidfile}"
    else
        _echo "Error: ${_pidfile} does not exist or service is not running"
    fi
)

_daemon_poll() (
    _pidfile="${_piddir}/${1}.pid"
    # if pidfile exists and pid from pidfile is running
    [ -f "${_pidfile}" ] && [ -h "/proc/$(cat "${_pidfile}")/exe" ]
)

_on_init() (

    _echo "Mounting API filesystem..."
    mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
    mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
    mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
    mountpoint -q /tmp     || mount -t tmpfs tmp /tmp -o mode=1777,nosuid,nodev
    mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
    mkdir -p /dev/pts /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
    mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev

    _echo "Setting up loopback device..."
    /usr/sbin/ip link set up dev lo

    _echo "Initializing udev..."
    /usr/lib/systemd/systemd-udevd --daemon
    /usr/bin/udevadm trigger --action=add --type=subsystems
    /usr/bin/udevadm trigger --action=add --type=devices

    _echo "Setting hostname..."
    cat /etc/hostname >| /proc/sys/kernel/hostname

    _echo "Creating symlinks..."
    ln -s /proc/kcore /dev/core
    ln -s /proc/self/fd /dev/fd
    ln -s /proc/self/fd/0 /dev/stdin
    ln -s /proc/self/fd/1 /dev/stdout
    ln -s /proc/self/fd/2 /dev/stderr

    _echo "Creating PID dir..."
    rm -rf "${_piddir}"
    mkdir -p "${_piddir}"
    chmod 777 "${_piddir}"

    _echo "Mounting fstab..."
    mount -a

    if [ -x /etc/minirc.local ]
    then
        _echo "Loading /etc/minirc.local..."
        /etc/minirc.local
    fi

    _echo "Starting daemons..."
    _echo "${_enabled}" | while read -r dmn
    do
        _daemon_start "${dmn}"
    done
)

_on_shutdown() (

    _echo "Stopping daemons..."
    _echo "${_daemons}" | while read -r dmn
    do
        _daemon_poll "${dmn}" && _daemon_stop "${dmn}"
    done

    if [ -x /etc/minirc.local.shutdown ]
    then
        _echo "Loading /etc/minirc.local.shutdown..."
        /etc/minirc.local.shutdown
    fi

    _echo "Shutting down udev..."
    killall -q -w systemd-udevd

    _echo "Unmounting API filesystem..."
    umount -r /run
)

_daemon_restart() {
    _daemon_stop "${1}"
    sleep 1
    _daemon_start "${1}"
}

_usage() {
    _echo "Usage: rc [--help] <action> [daemon]"
    _echo ""
    _echo "Actions:"
    _echo "   rc list              shows status of all daemons"
    _echo "   rc start [daemon]    starts daemon"
    _echo "   rc stop [daemon]     stops daemon"
    _echo "   rc restart [daemon]  restarts daemon"
    exit 2
}

_not_root() {
    _echo "Root privileges are required to run this command"
    exit 1
}

[ "${#}" -eq 0 ] && _usage

case "${1}" in
init|shutdown)
    [ "${#}" -ne 1 ] && _usage
    [ "$(id -u)" -ne 0 ] && _not_root
    _on_"${1}"
    ;;
start|stop|restart)
    [ "${#}" -ne 2 ] && _usage
    [ "$(id -u)" -ne 0 ] && _not_root
    _daemon_"${1}" "${2}"
    ;;
list)
    [ "${#}" -ne 1 ] && _usage
    _echo "${_daemons}" | while read -r dmn
    do
        if _daemon_poll "${dmn}"
        then
            printf '[\033[32mX\033[0m] %s\n' "${dmn}"
        else
            _echo "[ ] ${dmn}"
        fi
    done
    ;;
*)
    _usage
    ;;
esac
