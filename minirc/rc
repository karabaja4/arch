#!/bin/bash
set -u

echo -e "minirc @ 0.2"

declare -r PIDDIR="/tmp/minirc"
declare -r CONFIG="/etc/minirc.json"

declare -r DAEMONS="$(jq -crM '[.[] | .name] | join(" ")' ${CONFIG})"
declare -r ENABLED="$(jq -crM '[.[] | select(.enabled==true) | .name] | join(" ")' ${CONFIG})"

daemon_start() {
    declare -a array
    mapfile -t array < <( jq -crM --arg name "${1}" '.[] | select(.name==$name) | .user, .command' ${CONFIG} )
    if (( ${#array[@]} > 0 ))
    then
        daemon_execute "${1}" "${array[@]}"
    else
        echo -e "Error: unknown service: ${1}"
    fi
}

# ${1} -> service
# ${2} -> user
# ${3} -> command
# for logging use:
# |& logger --tag "${1}" &
daemon_execute() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    echo "Starting ${1}..."

    if daemon_poll "${1}"
    then
        echo "Error: ${pidfile} exists"
    else
        declare -r fifo="$(mktemp -u)"
        
        su - "${2}" -c "mkfifo ${fifo}"
        su - "${2}" -c "( ${3} & echo \$! > ${fifo} )" &> /dev/null &

        declare -r pid="$(cat "${fifo}")"
        echo "${pid}" > "${pidfile}"
        rm -f "${fifo}"
        echo "User: ${2}"
        echo "Exec: ${3}"
        echo "PID: ${pid}"
    fi
}

daemon_stop() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    echo "Stopping ${1}..."

    if daemon_poll "${1}"
    then
        declare -r pid="$(cat ${pidfile})"
        echo -ne "Killing ${pid}... "

        kill -TERM "${pid}"
        timeout 10 tail --pid="${pid}" -f /dev/null

        kill -KILL "${pid}" &> /dev/null
        timeout 10 tail --pid="${pid}" -f /dev/null

        echo "killed."
        rm -rf "${pidfile}"
    else
        echo "Error: ${pidfile} does not exist or service is not running"
    fi
}

daemon_poll() {
    declare -r pidfile="${PIDDIR}/${1}.pid"
    test -f "${pidfile}" && ps -p "$(cat "${pidfile}")" &> /dev/null
}

on_boot() {
    echo "Creating PID dir..."
    mkdir -p -m 777 "${PIDDIR}"

    echo "mounting API filesystem..."
    mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
    mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
    mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
    mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
    mkdir -p /dev/pts /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
    mountpoint -q /dev/shm || mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev

    echo "setting up loopback device..."
    /usr/sbin/ip link set up dev lo

    echo "initializing udev..."
    /usr/lib/systemd/systemd-udevd --daemon
    /usr/bin/udevadm trigger --action=add --type=subsystems
    /usr/bin/udevadm trigger --action=add --type=devices

    echo "setting hostname..."
    echo "$(cat /etc/hostname)" >| /proc/sys/kernel/hostname

    echo "creating symlinks..."
    ln -s /proc/kcore /dev/core
    ln -s /proc/self/fd /dev/fd
    ln -s /proc/self/fd/0 /dev/stdin
    ln -s /proc/self/fd/1 /dev/stdout
    ln -s /proc/self/fd/2 /dev/stderr

    echo "mounting fstab..."
    mount -a

    if [ -x /etc/minirc.local ]
    then
        echo "loading /etc/minirc.local..."
        /etc/minirc.local
    fi

    echo "starting daemons..."
    for dmn in ${ENABLED}
    do
        daemon_start "${dmn}"
    done
}

on_shutdown() {
    echo "stopping daemons..."
    for dmn in ${DAEMONS}
    do
        daemon_poll "${dmn}" && daemon_stop "${dmn}"
    done

    if [ -x /etc/minirc.local.shutdown ]
    then
        echo "loading /etc/minirc.local.shutdown..."
        /etc/minirc.local.shutdown
    fi

    echo "shutting down udev..."
    killall -q -w systemd-udevd

    echo "unmounting API filesystem..."
    umount -r /run
}

daemon_restart() {
    daemon_stop "${1}"
    sleep 1
    daemon_start "${1}"
}

usage() {
    echo "Usage: rc [--help] <action> [daemon]"
    echo
    echo "Actions:"
    echo "   rc list              shows status of all daemons"
    echo "   rc start [daemon]    starts daemon"
    echo "   rc stop [daemon]     stops daemon"
    echo "   rc restart [daemon]  restarts daemon"
    exit 2
}

not_root() {
    echo "Root privileges are required to run this command"
    exit 1
}

[ ${#} -eq 0 ] && usage

case "${1}" in
init|shutdown|list)
    [ ${#} -ne 1 ] && usage
    ;;&
start|stop|restart)
    [ ${#} -ne 2 ] && usage
    ;;&
init|shutdown|start|stop|restart)
    [ ${EUID} -ne 0 ] && not_root
    ;;&
init)
    on_boot;;
shutdown)
    on_shutdown;;
start|stop|restart)
    daemon_"${1}" "${2}";;
list)
    for dmn in ${DAEMONS}
    do
        if daemon_poll "${dmn}"
        then
            echo -e "\033[32m[X]\033[0m ${dmn}"
        else
            echo -e "\033[37m[ ]\033[0m ${dmn}"
        fi
    done;;
*)
    usage;;
esac
